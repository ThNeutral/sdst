// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: project_queries.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addUserToProject = `-- name: AddUserToProject :exec
INSERT INTO project_users (project_id, user_id, role)
VALUES ($1, $2, $3)
`

type AddUserToProjectParams struct {
	ProjectID uuid.UUID
	UserID    uuid.UUID
	Role      string
}

func (q *Queries) AddUserToProject(ctx context.Context, arg AddUserToProjectParams) error {
	_, err := q.db.Exec(ctx, addUserToProject, arg.ProjectID, arg.UserID, arg.Role)
	return err
}

const deleteUserFromProject = `-- name: DeleteUserFromProject :exec
DELETE FROM project_users WHERE project_id = $1 AND user_id = $2
`

type DeleteUserFromProjectParams struct {
	ProjectID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) DeleteUserFromProject(ctx context.Context, arg DeleteUserFromProjectParams) error {
	_, err := q.db.Exec(ctx, deleteUserFromProject, arg.ProjectID, arg.UserID)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT project_id, user_id, role FROM project_users WHERE project_id = $1 AND user_id = $2
`

type GetUserByIdParams struct {
	ProjectID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) GetUserById(ctx context.Context, arg GetUserByIdParams) (ProjectUser, error) {
	row := q.db.QueryRow(ctx, getUserById, arg.ProjectID, arg.UserID)
	var i ProjectUser
	err := row.Scan(&i.ProjectID, &i.UserID, &i.Role)
	return i, err
}
