// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message_queries.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one

INSERT INTO messages (id, body, posted_at, user_id, project_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, body, posted_at, user_id, project_id
`

type CreateMessageParams struct {
	ID        uuid.UUID
	Body      string
	PostedAt  time.Time
	UserID    uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.ID,
		arg.Body,
		arg.PostedAt,
		arg.UserID,
		arg.ProjectID,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.PostedAt,
		&i.UserID,
		&i.ProjectID,
	)
	return i, err
}

const getMessagesByProject = `-- name: GetMessagesByProject :many

SELECT id, body, posted_at, user_id, project_id FROM messages WHERE project_id = $1
`

func (q *Queries) GetMessagesByProject(ctx context.Context, projectID uuid.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.PostedAt,
			&i.UserID,
			&i.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByUsers = `-- name: GetMessagesByUsers :many

SELECT id, body, posted_at, user_id, project_id FROM messages WHERE user_id = $1
`

func (q *Queries) GetMessagesByUsers(ctx context.Context, userID uuid.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByUsers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.PostedAt,
			&i.UserID,
			&i.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
